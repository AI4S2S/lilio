[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.setuptools]
py-modules = ["lilio"]

[tool.hatch.version]
path = "lilio/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/docs",
  "/notebooks",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["lilio"]

[project]
name = "lilio"
description = "python package for generating calendars for machine learning timeseries analysis."
readme = "README.md"
license = { text = "Apache Software License" }
requires-python = ">=3.8, <3.11"
authors = [
  {name = "Yang Liu", email = "y.liu@esciencecenter.nl"},
  {name = "Bart Schilperoort", email = "b.schilperoort@esciencecenter.nl"},
  {name = "Peter Kalverla", email = "b.schilperoort@esciencecenter.nl"},
  {name = "Jannes van Ingen", email = "jannes.van.ingen@s2s-ai.com"},
  {name = "Sem Vijverberg", email = "sem.vijverberg@vu.nl"},
]
keywords = [
  "calendar",
  "calendar generation",
  "calendar maker",
  "machine learning",
  "timeseries analysis",

]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
dependencies = [
  "netcdf4",
  "numpy",
  "pandas",
  "matplotlib",
  "xarray",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
  "bump2version",
  "black",
  "coverage [toml]",
  "hatch",
  "isort",
  "mypy==0.981",
  "myst_parser",
  "pylint==2.15.6",
  "pyroma",
  "prospector[with_pyroma]",
  "pytest",
  "pytest-cov",
  "sphinx",
  "sphinx_rtd_theme",
  "sphinx-autoapi",
  "bokeh < 3.0.0",
  "tox",
]
publishing = ["twine", "wheel"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.pylint."messages control"]
# Suppress warnings for bad variables for specific variables:
good-names = ["X", "x", "y"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
include = '\.pyi?$'

[tool.isort]
py_version=39
skip = [".gitignore", ".dockerignore"]
skip_glob = ["docs/*"]
force_single_line = true
lines_after_imports = 2
no_lines_before = ["FUTURE","STDLIB","THIRDPARTY","FIRSTPARTY","LOCALFOLDER"]
known_first_party = ["lilio"]
src_paths = ["lilio", "tests"]
line_length = 120

[tool.coverage.run]
branch = true
source = ["lilio"]
command_line = "-m pytest"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.tox]
legacy_tox_ini = """

[tox]
envlist = py38,py39,py310
skip_missing_interpreters = true

[testenv]
commands = pytest
extras = dev

"""
